---
title: "Geospatial Data Wrangling with R"
subtitle: "Hands-on Exercise 1"
execute:
  warning: False  # This turns off warning messages being displayed
date: 8 January, 2024
date-modified: "last-modified"
---

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this exercise, we will perform geospatial data science tasks in R by using the `sf` package.

# Getting Started

## Installing and loading R packages

In this section, I will install and load tidyverse and sf packages.

```{r}
pacman::p_load(tidyverse, sf)
```

# Importing Geospatial Data

The data sources are:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://beta.data.gov.sg/collections/1708/view)

-   Pre-Schools Location from [data.gov.sg](https://beta.data.gov.sg/collections/2064/view)

-   Cycling Path from [LTADataMall](https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=cycling%20path)

-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/)

## Importing polygon feature data in Shapefile format

Import "MP14_SUBZONE_WEB_PL" shapefile into R as a polygon feature data frame.

```{r}
mpsz <- st_read(dsn = "../../data/geospatial/MP14_SUBZONE_WEB_PL",
                layer = "MP14_SUBZONE_WEB_PL")
# dsn: defines the data path
# layer: defines the name of the shapefile
# no file extension is required to be specified here
```

## Importing polyline feature data in Shapefile format

Import "CyclingPath" shapefile into R as a line feature data frame.

```{r}
cyclingpath = st_read(dsn = "../../data/geospatial/CyclingPath",
                      layer = "CyclingPathGazette")
```

## Importing GIS data in kml format

Import "PreSchoolsLocation" kml file into R

```{r}
preschool = st_read("../../data/geospatial/PreSchoolsLocation/PreSchoolsLocation.kml")
# kml file extension needs to be specified
```

# Checking the Content of a Simple Feature Data Frame

```{r}
st_geometry(mpsz)
```

```{r}
glimpse(mpsz)
```

```{r}
head(mpsz, n=5)
```

# Plotting the Geospatial Data

```{r}
#| echo: true  # This turns on/off the code block
#| eval: true  # This turns on/off the results
plot(mpsz)
plot(st_geometry(mpsz))
plot(mpsz["PLN_AREA_N"])
```

# Working with Projection

In order to perform geoprocessing using two geospatial data we need to ensure that both geospatial data are projected using similar coordinate system.

In this section, we will project a simple feature data frame from one coordinate system to another coordinate system. The technical term of this process is called **Projection Transformation**.

## Assigning EPSG code to a simple feature data frame

One common issue that can happen during importing geospatial data into R is that the coordinate system of the source data wasis missing (such as due to missing .proj for ESRI shapefile) or wrongly assigned during the importing process.

This is an example using the `mpsz` simple feature data frame.

```{r}
st_crs(mpsz)
```

Although `mpsz` data frame is projected in svy21, the EPSG is 9001 as indicated at the end of the print. This is the wrong EPSG code as the correct code for svy21 should be [3414](http://epsg.io/3414). We need to assign the correct EPSG code.

```{r}
mpsz3414 <- st_set_crs(mpsz, 3414)
st_crs(mpsz3414)
```

## Transforming the projection of preschool from wgs84 to svy21

In geospatial analytics, it is very common for us to transform the original data from **GEOGRAPHIC** coordinate system to **PROJECTED** coordinate system. This is because geographic coordinate system is not appropriate if the analysis needs to use distance or/and area measurements.

This is an example using the preschool simple feature data frame.

```{r}
st_geometry(preschool)
```

The Geodetic CRS for preschool is wgs84. We will transform that.

This is a scenario that `st_set_crs()` is not appropriate and `st_transform()` of sf package should be used. This is because we need to re-project the data frame from one coordinate system to another coordinate system mathematically.

```{r}
preschool3414 <- st_transform(preschool,crs = 3414)
st_geometry(preschool3414)
```

It is in svy21 projected coordinated system now.

Furthermore, if you refer to Bounding box:, the values are greater than 0-360 range of decimal degree commonly used by most of the geographic coordinate systems. If `st_set_crs()` was used, the bounding box would not have changed.

# Importing Aspatial Data

Since the listings data set is in csv format, we will use `read_csv()` to import listing.csv.\
The output R object is called listings and it is a [tibble data frame](http://r4ds.had.co.nz/tibbles.html)

```{r}
listings <- read_csv("../../data/aspatial/AirbnbListings/listings.csv")
list(listings)
```

Two useful fields we are going to use in the next phase are `latitude` and `longitude`. Note that they are in decimal degree format. As a best guess, we will assume that the data is in **wgs84** Geographic Coordinate System.

## Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings,
                        coords = c("longitude","latitude"),
                        crs=4326) %>%
  st_transform(crs = 3414)
```

Notes from the code above:

-   *coords* argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   *crs* argument requires you to provide the coordinates system in epsg format. [EPSG:4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG:3414](https://epsg.io/3414) is Singapore SVY21 Projected Coordinate System. You can search for other country's epsg code by referring to [epsg.io](http://epsg.io).

-   *%\>%* is used to nest `st_transform()` to transform the newly created simple feature data frame into svy21 projected coordinates system.

Let's examine the content of the new simple feature data frame.

```{r}
glimpse(listings_sf)
```

# Geoprocessing with sf package

sf package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

## Buffering

**The scenario:**

The authority is planning to upgrade the exiting cycling paths. To do so, they need to acquire 5 metres of reserved land on both sides of the current cycling path. You are tasked to determine the extend of the land needed to be acquired and their total area.

**The solution:**

Firstly, `st_buffer()` of sf package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                            dist = 5,
                            nQuadSegs = 30)
```

This is followed by calculating the area of the buffers.

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

Lastly, `sum()` of Base R will be used to derive the total land involved.

```{r}
sum(buffer_cycling$AREA)
```

## Point-in-polygon count

**The scenario:**

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

**The solution:**

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using `st_intersects()`. Next, `length()` of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz3414$`PreSch Count` <- lengths(st_intersects(mpsz3414, preschool3414))
summary(mpsz3414$`PreSch Count`)
```

To list the planning subzone with the most number of pre-school, the `top_n()` of dplyr package is used as shown in the code chunk below.

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

### DIY: Calculate the density of pre-school by planning subzone

The solution:

Firstly, the code below uses `st_area()` of sf package to derive the area of each planning subzone.

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

Next, `mutate()` of dplyr package is used to compute the density.

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# Exploratory Data Analysis (EDA)

In practice, many geospatial analytics start with EDA. In this section, you will learn how to use appropriate [ggplot2](http://ggplot2.tidyverse.org) functions to create functional and yet truthful statistical graphs for EDA purposes.

Firstly, we will plot a histogram to reveal the distribution of `PreSch Density`. Conventionally, `hist()` of R Graphics will be used as shown below.

```{r}
hist(mpsz3414$`PreSch Density`)
```

Although the syntax is easy, the function has limited customization.

In the code below, appropriate ggplot2 functions will be used.

```{r}
ggplot(data = mpsz3414,
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20,
                 color="black",
                 fill="light blue") +
  labs(title = "Are pre-schools evenly distributed in Singapore?",
       subtitle = "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools.",
       x = "Pre-school density (per km sq)",
       y = "Frequency")

```

### DIY: Using ggplot2 method

Plot a scatterplot showing the relatinoship between Pre-school Density and Pre-school Count

The solution:

```{r}
ggplot(data=mpsz3414,
       aes(y = `PreSch Count`,
           x = as.numeric(`PreSch Density`))) +
  geom_point(color='black',
             fill='light blue') + 
  xlim(0,40) +
  ylim(0,40) +
  labs (title = "",
        x = "Pre-school density (per km sq)",
        y = "Pre-school count")

```
